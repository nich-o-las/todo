{"version":3,"sources":["components/NewTodoForm/index.js","components/Todo/index.js","components/TodoList/index.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","useState","title","body","newTodo","setNewTodo","formClasses","showing","push","handleChange","evt","target","name","value","className","join","onSubmit","preventDefault","submitTodo","placeholder","onChange","id","Todo","titleStyle","textDecoration","completed","handleClick","dataset","type","onClick","unique","removeTodo","data-type","style","TodoList","todos","setTodos","active","setActive","editing","setEditing","useEffect","stored","localStorage","getItem","JSON","parse","updated","stringify","setItem","deleteTodo","filter","i","changeTodo","newTodos","length","text","changeActive","newActive","handleSubmit","innerText","completeTodo","console","log","newBtn","map","item","key","uuidv4","icon","faTrash","faSave","displayActive","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64000669.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './style.css';\r\n\r\nexport default function NewTodoForm(props){\r\n  const [newTodo, setNewTodo] = useState({title: '', body: ''});\r\n\r\n  let formClasses = [];\r\n  if(!props.showing){\r\n    formClasses.push('hide');\r\n  }\r\n\r\n  const handleChange = (evt) => {\r\n    if(evt.target.name === \"title\"){\r\n      setNewTodo({...newTodo, title: evt.target.value});\r\n    } else {\r\n      setNewTodo({...newTodo, body: evt.target.value});\r\n    }\r\n  }\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    props.submitTodo(newTodo.title, newTodo.body);\r\n    setNewTodo({title:'', body:''});\r\n  }\r\n\r\n  return(\r\n    <div className={[\"NewTodoForm\", ...formClasses].join(' ')} >\r\n      <form\r\n        onSubmit={handleSubmit}\r\n      >\r\n        <input\r\n          className=\"inputField titleInput\"\r\n          placeholder=\"Title\"\r\n          name=\"title\"\r\n          value={newTodo.title}\r\n          onChange={handleChange}\r\n          id=\"NewTodoInput\"\r\n        />\r\n        <textarea\r\n          className=\"inputField bodyInput\"\r\n          placeholder=\"body\"\r\n          name=\"body\"\r\n          value={newTodo.body}\r\n          onChange={handleChange}\r\n          id=\"NewTodoInput\"\r\n        />\r\n        <button>Submit</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport './style.css';\r\n\r\nexport default function Todo(props){\r\n  const titleStyle = {textDecoration: \"none\"};\r\n  if(props.completed) titleStyle.textDecoration = \"line-through\";\r\n  const handleClick = (evt) => {\r\n    if(evt.target.dataset.type === 'title'){\r\n      props.onClick(props.unique);\r\n    } else {\r\n      props.removeTodo(props.unique);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"Todo\" onClick={handleClick}>\r\n      <p data-type=\"title\" style={titleStyle}>\r\n          {props.title}\r\n      </p>\r\n      <button onClick={handleClick}>delete</button>\r\n    </div>\r\n  )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport './style.css';\r\nimport NewTodoForm from '../NewTodoForm';\r\nimport Todo from '../Todo';\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave, faTrash } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nexport default function TodoList(){\r\n  const [todos, setTodos] = useState([]);\r\n  const [active, setActive] = useState({});\r\n  const [editing, setEditing] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    let stored = localStorage.getItem('reactTodos');\r\n    setTodos(JSON.parse(stored));\r\n    setActive(JSON.parse(stored)[0])\r\n  }, []);\r\n\r\n  useEffect(()=>{\r\n    let updated = JSON.stringify(todos);\r\n    localStorage.setItem('reactTodos', updated);\r\n    setActive(JSON.parse(updated)[0])\r\n  }, [todos]);\r\n\r\n  const createTodo = (title, body) => {\r\n    setTodos([...todos, {body, title, id: uuidv4(), completed: false}]);\r\n    setEditing(false)\r\n  }\r\n  const deleteTodo = (id) => {\r\n    setTodos(todos.filter(i => i.id !== id))\r\n  }\r\n  const changeTodo = (title, body, id) => {\r\n    let newTodos = todos;\r\n    for(let i = 0; i < newTodos.length; i++){\r\n      if(newTodos[i].id === id) {\r\n        newTodos[i].text = title;\r\n        newTodos[i].body = body;\r\n      }\r\n    }\r\n    setTodos([...newTodos]);\r\n  }\r\n  const completeTodo = (id) => {\r\n    let newTodos = todos;\r\n    for(let i = 0; i < newTodos.length; i++){\r\n      if(newTodos[i].id === id) newTodos[i].completed = !newTodos[i].completed;\r\n    }\r\n    setTodos([...newTodos]);\r\n  }\r\n  const displayList = () => {\r\n    return (\r\n      todos.map( (item) => {\r\n        return (\r\n                  <Todo \r\n                    key={item.id} \r\n                    unique={item.id}\r\n                    completed={item.completed}\r\n                    removeTodo={deleteTodo}\r\n                    title={item.title}\r\n                    onClick={changeActive}\r\n                  />)\r\n      })\r\n    )\r\n  }\r\n\r\n  const displayActive = () => {\r\n    if(active && editing){\r\n      return(\r\n        <div className=\"TodoList-activeNote\">\r\n          <form\r\n            onSubmit={handleSubmit}\r\n          >\r\n            <input \r\n              className=\"titleInput\"\r\n              type=\"text\" \r\n              value={active.title} \r\n              name=\"title\"\r\n              onChange={handleChange}\r\n            />\r\n            <textarea \r\n              className=\"bodyInput\"\r\n              value={active.body} \r\n              name='body'\r\n              onChange={handleChange}\r\n            />\r\n            <span onClick={handleClick} data-type=\"delete\">\r\n              <FontAwesomeIcon icon={faTrash} />\r\n            </span>\r\n            <button onClick={handleClick}>\r\n              complete\r\n            </button>\r\n            <FontAwesomeIcon onClick={handleSubmit} icon={faSave} />\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const changeActive = (id) => {\r\n    const newActive = todos.filter(i => i.id === id);\r\n    setActive(newActive[0]);\r\n    setEditing(true);\r\n  }\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n    changeTodo(active.title, active.body, active.id);\r\n  }\r\n\r\n  const handleClick = (evt) => {\r\n    if(evt.target.innerText === \"complete\"){\r\n      completeTodo(active.id);\r\n    } else if(evt.target.innerText === \"edit\"){\r\n      changeTodo(active.title, active.body, active.id);\r\n    } else if(evt.target.dataset.type === \"delete\"){\r\n      console.log('delete')\r\n      deleteTodo(active.id);\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt) => {\r\n    if(evt.target.name === \"body\"){\r\n      setActive({...active, body: evt.target.value})}\r\n    else{\r\n      setActive({...active, title: evt.target.value});\r\n    };\r\n  }\r\n\r\n  const newBtn = () => {\r\n    if(editing){\r\n      return(\r\n        <h3\r\n          className=\"TodoList-newBtn\"\r\n          onClick={()=>setEditing(false)}\r\n        >\r\n          new item\r\n        </h3>\r\n      )\r\n    }\r\n  }\r\n  \r\n  return(\r\n    <div className=\"TodoList\">\r\n      <div className=\"TodoList-header\">\r\n        <div className=\"TodoList-newBtnBox\">\r\n          {newBtn()}\r\n        </div>\r\n        <h1>Todo List</h1>\r\n      </div>\r\n      <div className=\"TodoList-container\">\r\n        <div className=\"TodoList-list\">\r\n          {displayList()}\r\n        </div>\r\n        <div className=\"TodoList-edit\">\r\n          <NewTodoForm \r\n            showing={!editing}\r\n            submitTodo={createTodo}\r\n          />\r\n          {displayActive()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}